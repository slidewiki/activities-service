#!/usr/bin/env node

'use strict';

const ProgressBar = require('progress');

const db = require('../database/helper');
const lrsService = require('../services/lrs');

async function lrsCopy() {
  let batchSize = 100;

  let query = {
    user_id: { $nin: ['0', '-1'] },
    activity_type: { $nin: ['joined', 'left', 'move', 'attach', null] },
  };

  let activities = await db.getCollection('activities');
  let totalCount = await activities.count(query);

  let currentOffset = 0;
  let progressBar = new ProgressBar('copying :current out of :total activities (ETA: :eta sec) [:bar] :percent', { total: totalCount });

  while (currentOffset < totalCount) {
    let docs = await activities.find(query).skip(currentOffset).limit(batchSize).toArray();

    try {
      await lrsService.saveActivities(docs, progressBar);
    } catch (saveErr) {
      try {
        // try to parse some JSONs in strings
        let { statements } = JSON.parse(saveErr.message);
        console.info('failed to save statements');
        console.info(statements);
      } catch (parseError) {
        // throw original, unknown error
        throw saveErr;
      }
    }

    // for (let doc of docs) {
    //   try {
    //     await lrsService.saveActivity(doc);
    //   } catch (saveErr) {
    //     console.info(`failed to save activity ${doc._id}`);
    //     try {
    //       // try to parse some JSON in string
    //       let { statement } = JSON.parse(saveErr.message);
    //       console.info(statement);
    //     } catch (parseError) {
    //       console.info(saveErr.message);
    //     }
    //   }
    //   progressBar.tick();
    // }

    currentOffset += batchSize;
  }
}

(async () => {
  try {
    if (!lrsService.isAvailable()) {
      console.error('LRS is unavailable');
      process.exit(-1);
    }
    await lrsCopy();
    process.exit(0);
  } catch (err) {
    console.error(err);
    process.exit(-1);
  }
})();
